name: Build

on: [push]

jobs:
  build:
    name: Build
    env:
      V8BUILD_VERSION: '8.3.110.13'
      DEPOT_TOOLS_WIN_TOOLCHAIN: '0'
      vs2019_install: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # os: [windows-latest, ubuntu-latest, macos-latest]
        os: [windows-latest]

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 2.7
      uses: actions/setup-python@v2
      with:
        python-version: '2.7'
        architecture: 'x64'

    - name: Cache depot_tools
      uses: actions/cache@v2
      env:
        cache-name: cache-depot-tools
      with:
        path: ./depot_tools
        key: ${{ matrix.os }}-build-${{ env.cache-name }}
        restore-keys: |
          ${{ matrix.os }}-build-${{ env.cache-name }}

    - name: Windows fetch
      if: ${{ matrix.os == 'windows-latest' }}
      shell: cmd
      run: |
        call .\get_depot_tools.bat
        call fetch.bat v8

    - name: Cache output
      uses: actions/cache@v2
      env:
        cache-name: cache-output
      with:
        path: ./v8/out.gn
        key: ${{ matrix.os }}-build-${{ env.cache-name }}
        restore-keys: |
          ${{ matrix.os }}-build-${{ env.cache-name }}

    - name: Windows build
      if: ${{ matrix.os == 'windows-latest' }}
      shell: cmd
      run: call .\build.bat

    # - name: Linux build
    #   if: ${{ matrix.os == 'ubuntu-latest' }}
    #   shell: bash
    #   run: |
    #     mkdir -p ./out
    #     echo "linux" > ./out/linux.txt

    # - name: macOS build
    #   if: ${{ matrix.os == 'macos-latest' }}
    #   shell: bash
    #   run: |
    #     mkdir -p ./out
    #     echo "darwin" > ./out/darwin.txt

    - name: Create release
      # if: ${{ startsWith(github.event.ref, 'refs/tags') }}
      uses: toyobayashi/upload-release-assets@v3.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.after }} # required, create if the tag does not exist
        release_name: ${{ github.event.after }} # required
        # target_commitish: ''
        # body: ''
        draft: true
        prerelease: false

        # The value of `assets` field can be a single line string that includes
        # paths or globs seperated by `;`

        # assets: ./out/*.txt; ./dist/main.js; ./not/exists

        # It can be also multiple line
        assets: |
          ./v8*.zip
